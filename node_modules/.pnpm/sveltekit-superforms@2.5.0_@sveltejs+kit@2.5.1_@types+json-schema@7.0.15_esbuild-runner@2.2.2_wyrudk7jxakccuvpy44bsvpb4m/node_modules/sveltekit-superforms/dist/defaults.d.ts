import { type ValidationAdapter } from './adapters/adapters.js';
import type { SuperValidateOptions, SuperValidated } from './superValidate.js';
type SuperSchemaData<T extends Record<string, unknown>> = Partial<T> | null | undefined;
type SuperSchemaOptions<T extends Record<string, unknown>> = Pick<SuperValidateOptions<T>, 'id' | 'defaults' | 'jsonSchema'>;
export declare function defaults<T extends Record<string, unknown>, M = App.Superforms.Message extends never ? any : App.Superforms.Message>(adapter: ValidationAdapter<T>, options?: SuperSchemaOptions<T>): SuperValidated<T, M>;
export declare function defaults<T extends Record<string, unknown>, M = App.Superforms.Message extends never ? any : App.Superforms.Message>(defaults: SuperSchemaData<T>, adapter: ValidationAdapter<T>, options?: SuperSchemaOptions<T>): SuperValidated<T, M>;
export declare function defaultValues<T extends Record<string, unknown>>(adapter: ValidationAdapter<T>): T;
export {};
