/// <reference types="svelte" />
import { type Readable, type Updater, type Writable } from 'svelte/store';
import type { InputConstraint } from '../index.js';
import { type FormPath, type FormPathLeaves, type FormPathType } from '../stringPath.js';
import type { FormPathArrays } from '../stringPath.js';
import type { SuperForm, TaintOption } from './index.js';
import type { Prettify } from '../utils.js';
export type ProxyOptions = {
    taint?: TaintOption;
};
type CorrectProxyType<In, Out, T extends Record<string, unknown>, Path extends FormPath<T>> = NonNullable<FormPathType<T, Path>> extends In ? Writable<Out> : never;
type DefaultOptions = {
    trueStringValue: string;
    dateFormat: 'date' | 'datetime' | 'time' | 'date-utc' | 'datetime-utc' | 'time-utc' | 'date-local' | 'datetime-local' | 'time-local' | 'iso';
    delimiter?: '.' | ',';
    empty?: 'null' | 'undefined' | 'zero';
    initiallyEmptyIfZero?: boolean;
    taint?: TaintOption;
};
export declare function booleanProxy<T extends Record<string, unknown>, Path extends FormPath<T>>(form: Writable<T> | SuperForm<T, unknown>, path: Path, options?: Prettify<Pick<DefaultOptions, 'trueStringValue' | 'taint'>>): CorrectProxyType<boolean, string, T, Path>;
export declare function intProxy<T extends Record<string, unknown>, Path extends FormPath<T>>(form: Writable<T> | SuperForm<T, unknown>, path: Path, options?: Prettify<Pick<DefaultOptions, 'empty' | 'initiallyEmptyIfZero' | 'taint'>>): CorrectProxyType<number, string, T, Path>;
export declare function numberProxy<T extends Record<string, unknown>, Path extends FormPath<T>>(form: Writable<T> | SuperForm<T, unknown>, path: Path, options?: Prettify<Pick<DefaultOptions, 'empty' | 'delimiter' | 'initiallyEmptyIfZero' | 'taint'>>): CorrectProxyType<number, string, T, Path>;
export declare function dateProxy<T extends Record<string, unknown>, Path extends FormPath<T>>(form: Writable<T> | SuperForm<T, unknown>, path: Path, options?: {
    format?: DefaultOptions['dateFormat'];
    empty?: Exclude<DefaultOptions['empty'], 'zero'>;
    taint?: TaintOption;
}): CorrectProxyType<Date, string, T, Path>;
export declare function stringProxy<T extends Record<string, unknown>, Path extends FormPath<T>>(form: Writable<T> | SuperForm<T, unknown>, path: Path, options: {
    empty: NonNullable<Exclude<DefaultOptions['empty'], 'zero'>>;
    taint?: TaintOption;
}): Writable<string>;
type ArrayFieldErrors = any[];
export declare function arrayProxy<T extends Record<string, unknown>, Path extends FormPathArrays<T>>(superForm: SuperForm<T, any>, path: Path, options?: {
    taint?: TaintOption;
}): {
    path: Path;
    values: Writable<FormPathType<T, Path> & unknown[]>;
    errors: Writable<string[] | undefined>;
    valueErrors: Writable<ArrayFieldErrors>;
};
export declare function formFieldProxy<T extends Record<string, unknown>, Path extends FormPathLeaves<T>>(superForm: SuperForm<T, any>, path: Path, options?: ProxyOptions): {
    path: Path;
    value: SuperFieldProxy<FormPathType<T, Path>>;
    errors: Writable<string[] | undefined>;
    constraints: Writable<InputConstraint | undefined>;
    tainted: Writable<boolean | undefined>;
};
type SuperFieldProxy<T> = {
    subscribe: Readable<T>['subscribe'];
    set(this: void, value: T, options?: {
        taint?: TaintOption;
    }): void;
    update(this: void, updater: Updater<T>, options?: {
        taint?: TaintOption;
    }): void;
};
export declare function fieldProxy<T extends Record<string, unknown>, Path extends FormPath<T>>(form: Writable<T> | SuperForm<T, unknown>, path: Path, options?: ProxyOptions): Writable<FormPathType<T, Path>>;
export {};
