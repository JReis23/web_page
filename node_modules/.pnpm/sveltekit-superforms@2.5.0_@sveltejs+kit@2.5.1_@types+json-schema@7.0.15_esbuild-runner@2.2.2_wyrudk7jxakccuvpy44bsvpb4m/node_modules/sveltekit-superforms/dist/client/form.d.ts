/// <reference types="svelte" />
/// <reference types="@sveltejs/kit" />
import type { FormOptions } from './index.js';
import type { Writable } from 'svelte/store';
/**
 * @DCI-context
 */
export declare function Form<T extends Record<string, unknown>, M>(formElement: HTMLFormElement, timers: {
    submitting: Writable<boolean>;
    delayed: Writable<boolean>;
    timeout: Writable<boolean>;
}, options: FormOptions<T, M>): {
    submitting(): void;
    completed: (opts: {
        cancelled: boolean;
        clearAll?: boolean;
    }) => void;
    scrollToFirstError(): void;
    isSubmitting: () => boolean;
};
export declare const scrollToFirstError: <T extends Record<string, unknown>, M>(Form: HTMLFormElement, options: Partial<{
    id: string;
    applyAction: boolean;
    invalidateAll: boolean;
    resetForm: boolean | (() => boolean);
    scrollToError: boolean | ScrollIntoViewOptions | "auto" | "smooth" | "off";
    autoFocusOnError: boolean | "detect";
    errorSelector: string;
    selectErrorText: boolean;
    stickyNavbar: string;
    taintedMessage: string | boolean | (() => import("../utils.js").MaybePromise<boolean>) | null;
    SPA: true | {
        failStatus?: number | undefined;
    };
    onSubmit: (input: {
        action: URL;
        formData: FormData;
        formElement: HTMLFormElement;
        controller: AbortController;
        submitter: HTMLElement | null;
        cancel(): void;
    } & {
        jsonData: (data: Record<string, unknown>) => void;
        validators: (validators: false | import("../adapters/adapters.js").ValidationAdapter<Partial<T>, Record<string, unknown>>) => void;
    }) => unknown;
    onResult: (event: {
        result: import("@sveltejs/kit").ActionResult;
        formEl: HTMLFormElement;
        formElement: HTMLFormElement;
        cancel: () => void;
    }) => unknown;
    onUpdate: (event: {
        form: import("./index.js").SuperValidated<T, M, T>;
        formEl: HTMLFormElement;
        formElement: HTMLFormElement;
        cancel: () => void;
    }) => unknown;
    onUpdated: (event: {
        form: Readonly<import("./index.js").SuperValidated<T, M, T>>;
    }) => unknown;
    onError: "apply" | ((event: {
        result: {
            type: "error";
            status?: number | undefined;
            error: App.Error;
        };
    }) => unknown);
    onChange: (event: import("./superForm.js").ChangeEvent<T>) => void;
    dataType: "form" | "json";
    jsonChunkSize: number;
    validators: import("../adapters/adapters.js").ClientValidationAdapter<Partial<T>, Record<string, unknown>> | (false | "clear" | import("../adapters/adapters.js").ValidationAdapter<Partial<T>, Record<string, unknown>>);
    validationMethod: "auto" | "oninput" | "onblur" | "onsubmit" | "submit-only";
    customValidity: boolean;
    clearOnSubmit: "message" | "errors" | "errors-and-message" | "none";
    delayMs: number;
    timeoutMs: number;
    multipleSubmits: "abort" | "prevent" | "allow";
    syncFlashMessage?: boolean | undefined;
    flashMessage: {
        module: {
            getFlash(page: import("svelte/store").Readable<import("@sveltejs/kit").Page<Record<string, string>, string | null>>): Writable<any>;
            updateFlash(page: import("svelte/store").Readable<import("@sveltejs/kit").Page<Record<string, string>, string | null>>, update?: (() => Promise<void>) | undefined): Promise<boolean>;
        };
        onError?: ((event: {
            result: {
                type: "error";
                status?: number | undefined;
                error: App.Error;
            };
            flashMessage: Writable<any>;
        }) => unknown) | undefined;
        cookiePath?: string | undefined;
        cookieName?: string | undefined;
    };
    warnings: {
        duplicateId?: boolean | undefined;
    };
    legacy: boolean;
}>) => Promise<void>;
