import { type ValidationAdapter, type Infer, type InferIn, type ClientValidationAdapter } from './adapters.js';
import { type BaseSchema, type BaseSchemaAsync } from 'valibot';
import { type ToJSONSchemaOptions } from '@gcornut/valibot-json-schema';
import type { JSONSchema } from '../jsonSchema/index.js';
type SupportedSchemas = BaseSchema | BaseSchemaAsync;
export declare const valibotToJSONSchema: (options: ToJSONSchemaOptions) => JSONSchema;
export declare const valibot: <T extends SupportedSchemas>(schema: T, options?: {
    definitions?: Record<string, import("valibot").AnySchema | import("valibot").LiteralSchema<any> | import("valibot").NullSchema | import("valibot").NumberSchema | import("valibot").StringSchema | import("valibot").BooleanSchema | import("valibot").NullableSchema<any> | import("valibot").ObjectSchema<any, any> | import("valibot").RecordSchema<any, any> | import("valibot").ArraySchema<any> | import("valibot").TupleSchema<any, any> | import("valibot").IntersectSchema<any> | import("valibot").UnionSchema<any> | import("valibot").PicklistSchema<any> | import("valibot").RecursiveSchema<any> | import("valibot").DateSchema | import("valibot").NullishSchema<any> | import("valibot").OptionalSchema<any>> | undefined;
    strictObjectTypes?: boolean | undefined;
    dateStrategy?: ("string" | "integer") | undefined;
    ignoreUnknownValidation?: boolean | undefined;
    jsonSchema?: JSONSchema | undefined;
    defaults?: Infer<T> | undefined;
    config?: import("valibot").SchemaConfig | undefined;
} | undefined) => ValidationAdapter<Infer<T>, InferIn<T>>;
export declare const valibotClient: <T extends SupportedSchemas>(schema: T) => ClientValidationAdapter<Infer<T>, InferIn<T>>;
export {};
